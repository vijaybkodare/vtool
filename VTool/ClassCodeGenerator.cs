using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.IO; 

namespace VTool
{
    class ClassCodeGenerator
    {
        protected DataTable dt;
        protected StringBuilder strBuilder;
        protected string tab1 = "\t";
        protected string tab2 = "\t\t";
        protected string tab3 = "\t\t\t";
        protected string tab4 = "\t\t\t\t";

        public void GenerateClassCode(string tableName)
        {
            strBuilder = new StringBuilder();
            dt = DBHandler.GetTableWithSchema(tableName);
            PrepareClassCode ();
            WriteClassCodeInFile();
        }
        private void PrepareClassCode()
        {
            WriteImportsStatement();
            strBuilder.AppendLine("Namespace " + AppSetting.namespaceName);
            WriteClassCode();
            strBuilder.AppendLine("End Namespace");
        }
        protected void WriteClassCodeInFile()
        {
            string fileName = System.Configuration.ConfigurationSettings.AppSettings["OutPutFilePath"].ToString() +
                "\\ClassCode\\" + GetClassName() + ".vb";
            File.WriteAllText(fileName, strBuilder.ToString());
        }
        private void WriteImportsStatement()
        {
            strBuilder.AppendLine("'Code is auto generated by VTool");
            strBuilder.AppendLine("Imports ES.Common");
            strBuilder.AppendLine("Imports System.Data");
            strBuilder.AppendLine("Imports WSCaller");
        }
        private void WriteClassCode()
        {
            strBuilder.AppendLine(tab1 + "Public Class " + 
                AppSetting.preClass + dt.TableName + AppSetting.postClass);  
            WriteVariableDeclaration();
            WriteConstructor();
            WritePropertiesOfVariable();
            WriteRegularFunctions();
            WriteWSRelatedFunctions();
            WriteSupportFunctions();
            WriteRegionSpeceficToThisClass();
            strBuilder.AppendLine(tab1 + "End Class");  
        }
        private void WriteRegionSpeceficToThisClass()
        {
            WriteRegion(" Function: Specefic to this Class ");
            WriteEndRegion(); 
        }
        private void WriteRegularFunctions()
        {
            WriteRegion(" Data Access Function: Regular "); 
            WriteGetRecordSub();
            //WriteGetRecordFunction ()
            WriteAddRecFunction();
            WriteUpdateRecFunction();
            WriteDeleteRecSub();
            WriteAddParameterSub();
            WriteGetParameterFunction();
            WriteEndRegion(); 
        }
        private void WriteWSRelatedFunctions()
        {
            WriteRegion(" Data Access Function: Web Service ");
            WriteGetRecordUsingWS();
            WriteAddRecordUsingWS();
            WriteUpdateRecordUsingWS();
            WriteDeleteRecordUsingWS();
            WriteAddWSParameter();
            WriteEndRegion(); 
        }
        private void WriteSupportFunctions()
        {
            WriteRegion(" Data Access Function: Supporting "); 
            WriteInitFunction();
            WriteSetValuesSub();
            WriteGetAllRecordsFunction();
            WriteCopyFunction();
            WriteEndRegion();
        }

        #region Data Access Function: Web Service
        private void WriteGetRecordUsingWS()
        {
            WriteSubDefination("Public", "GetRecordUsingWS(ByVal RecordId As String)");
            strBuilder.AppendLine(tab3 + "Dim QueryString As String");
            strBuilder.AppendLine(tab3 + "Dim DT As DataTable");
            strBuilder.AppendLine(tab3 + "Try");
            strBuilder.AppendLine(tab4 + "QueryString = \"SELECT * FROM " + dt.TableName + " WHERE " +
                dt.Rows[0]["Column_Name"] + " = '\" + RecordId + \"'");
            strBuilder.AppendLine(tab4 + "DT = VDALAccessor.GetDataTable(QueryString)");
            strBuilder.AppendLine(tab3 + "If DT Is Nothing Then Exit Sub");
            strBuilder.AppendLine(tab4 + "SetValues(DT.Rows(0))");
            WriteExceptionHandlingStatement("GetRecordUsingWS");
            WriteEndSub (); 
        }
        private void WriteAddRecordUsingWS()
        {
            WriteFunctionDefination("Public", "AddRecordUsingWS()", "string");
            strBuilder.AppendLine(tab3 + "Try");
            strBuilder.AppendLine(tab4 + "AddWSParameter(\"Add\")");
            strBuilder.AppendLine(tab4 + "VDALAccessor.AddParameter(\"RecId\", SqlDbType.VarChar, \"\", ParameterDirection.Output, 30)");
            strBuilder.AppendLine(tab4 + "AddRecordUsingWS = VDALAccessor.InsertRecWithSPByReturningId(\"" +
                AppSetting.preInsProc + "Insert_" + dt.TableName +
                AppSetting.postInsProc + "\")");
            strBuilder.AppendLine(tab3 + "Catch ex As Exception");
            strBuilder.AppendLine(tab4 + "ES.RenfroERP.Messages.StoreRunTimeErrors(Me.ClassName, ex.Message, \"AddRecordUsingWS()\")");
            strBuilder.AppendLine(tab4 + "Return \"\"");
            strBuilder.AppendLine(tab3 + "End Try");
            WriteEndFunction(); 
        }
        private void WriteUpdateRecordUsingWS()
        {
            WriteSubDefination ("Public", "UpdateRecordUsingWS()");
            strBuilder.AppendLine(tab3 + "Try");
            strBuilder.AppendLine(tab4 + "AddWSParameter(\"Edit\")");
            strBuilder.AppendLine(tab4 + "VDALAccessor.ExecuteNonQueryWithSP(\"" +
                AppSetting.preInsProc + "Update_" + dt.TableName +
                AppSetting.postInsProc + "\")");
            strBuilder.AppendLine(tab3 + "Catch ex As Exception");
            strBuilder.AppendLine(tab4 + "ES.RenfroERP.Messages.StoreRunTimeErrors(Me.ClassName, ex.Message, \"UpdateRecordUsingWS()\")");
            strBuilder.AppendLine(tab3 + "End Try");
            WriteEndFunction(); 
        }
        private void WriteDeleteRecordUsingWS()
        {
            WriteSubDefination("Public", "DeleteRecordUsingWS(ByVal RecId As String, ByVal ModifiedBy As String)");
            strBuilder.AppendLine(tab3 + "Dim QueryString As String");
            strBuilder.AppendLine(tab3 + "Try");
            strBuilder.AppendLine(tab3 + "QueryString = \"UPDATE " + dt.TableName + " SET ");
            strBuilder.AppendLine(tab3 + "QueryString += \"IsDeleted = 'Y', \"");
            strBuilder.AppendLine(tab3 + "QueryString += \"ModifiedBy = '\" & ModifiedBy & \"', \"");
            strBuilder.AppendLine(tab3 + "QueryString += \"ModifiedDt = GetDate() \"");
            strBuilder.AppendLine(tab3 + "QueryString += \"WHERE " + dt.Rows[0]["Column_Name"].ToString() + " = '\" & RecId & \"'\"");
            strBuilder.AppendLine(tab3 + "VDALAccessor.ExecuteNonQuery(QueryString)");
            WriteExceptionHandlingStatement("DeleteRecordUsingWS"); 
            WriteEndSub(); 
        }
        private void WriteAddWSParameter()
        {
            WriteSubDefination("Private", "AddWSParameter(ByVal Mode As String)");
            strBuilder.AppendLine(tab3 + "Try");
            for (int i = 1; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i]["Column_Name"].ToString() == "AddedBy" ||
                    dt.Rows[i]["Column_Name"].ToString() == "ModifiedBy" ||
                    dt.Rows[i]["Column_Name"].ToString() == "AddedDt" ||
                    dt.Rows[i]["Column_Name"].ToString() == "ModifiedDt")
                    continue;
                strBuilder.AppendLine(tab3 + GetStatementForAddingWSParameter(dt.Rows[i]["Column_Name"].ToString(),
                    dt.Rows[i]["Data_Type"].ToString()));
            }
            strBuilder.AppendLine(tab3 + "If Mode = \"Add\" Then");
            strBuilder.AppendLine(tab4 + "VDALAccessor.AddParameter(\"AddedBy\", SqlDbType.VarChar, L_AddedBy)");
            strBuilder.AppendLine(tab3 + "Else");
            strBuilder.AppendLine(tab4 + "VDALAccessor.AddParameter(\"" +
                dt.Rows[0]["Column_Name"].ToString() +
                "\", SqlDbType.VarChar," +
                GetVarNameWRTSetting(dt.Rows[0]["Column_Name"].ToString()) + ")");
            strBuilder.AppendLine(tab4 + "VDALAccessor.AddParameter(\"ModifiedBy\", SqlDbType.VarChar, L_ModifiedBy)");
            strBuilder.AppendLine(tab3 + "End If");
            WriteExceptionHandlingStatement("AddWSParameter"); 
            WriteEndSub();
        }
        #endregion

        private void WriteConstructor()
        {
            WriteRegion(" Data Access Function "); 
            strBuilder.AppendLine(tab2 + "Public Sub New()");
            strBuilder.AppendLine(tab3 + "'myIPAL = ES.DAC.GetProvider()");
            strBuilder.AppendLine(tab3 + "Init()");
            WriteEndSub();
            WriteEndRegion(); 
        }
        private void WriteVariableDeclaration()
        {
            WriteRegion("Private Variables");
            strBuilder.AppendLine(tab2 + "Private ClassName As String = \"" + AppSetting.preClass + dt.TableName + AppSetting.postClass + "\"");
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                strBuilder.AppendLine(GetVariableDeclaration(dt.Rows[i]["Column_Name"].ToString(),
                    dt.Rows[i]["Data_Type"].ToString()));
            }
            strBuilder.AppendLine(tab2 + "Private cmd As IDbCommand");
            WriteEndRegion();  
        }
        private void WriteEndRegion()
        {
            strBuilder.AppendLine("#End Region");
        }
        private void WriteBlankLine()
        {
            strBuilder.AppendLine("");  
        }
        private void WriteRegion(string regionDesc)
        {
            WriteBlankLine(); 
            strBuilder.AppendLine("#Region \"" + regionDesc + "\"" );
        }
        private string GetVariableDeclaration(string colName, string dataType)
        {
            string str = tab2 + "Private " + GetVarNameWRTSetting(colName) + " As ";
            str += GetDataType(dataType); 
            return str;
        }
        private string GetDataType(string dataType)
        {
            string str="";
            switch (dataType)
            {
                case "varchar": str = "string"; break;
                case "nvarchar": str = "string"; break;
                case "numeric": str = "Decimal"; break;
                case "datetime": str = "Date"; break;
                case "bit": str = "Decimal"; break;
            }
            return str;
        }
        private string GetSqlDataType(string dataType)
        {
            string str = "";
            switch (dataType)
            {
                case "varchar": str = "VarChar"; break;
                case "nvarchar": str = "nVarChar"; break;
                case "numeric": str = "Decimal"; break;
                case "datetime": str = "DateTime"; break;
                case "bit": str = "Bit"; break;
            }
            return str;
        }
        private string GetVarNameWRTSetting(string var)
        {
            return AppSetting.preVar + var + AppSetting.postVar;   
        }
        private void WritePropertiesOfVariable()
        {
            WriteRegion("Properties (Class Attributes)"); 
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                strBuilder.AppendLine(GetPropertyForVariable(dt.Rows[i]["Column_Name"].ToString(),
                    dt.Rows[i]["Data_Type"].ToString()));
            }
            WriteEndRegion(); 
        }
        private void WriteInitFunction()
        {
            WriteSubDefination("Private", "Init()");
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                strBuilder.AppendLine(tab3 + GetInitDefForVar(dt.Rows[i]["Column_Name"].ToString(),
                    dt.Rows[i]["Data_Type"].ToString()));
            }
            WriteEndSub();
        }
        private string GetClassName()
        {
            return AppSetting.preClass + dt.TableName + AppSetting.postClass; 
        }
        private void WriteCopyFunction()
        {
            WriteFunctionDefination("Public", "Copy()", GetClassName());
            strBuilder.AppendLine(tab3 + "Dim tempObj As New " + GetClassName());
            strBuilder.AppendLine(tab3 + "With tempObj");  
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                strBuilder.AppendLine(tab4 + GetCopyDefination(dt.Rows[i]["Column_Name"].ToString()));
            }
            strBuilder.AppendLine(tab3 + "End With");  
            strBuilder.AppendLine(tab3 + "Return tempObj");  
            WriteEndFunction();
        }
        private string GetCopyDefination(string dataType)
        {
            string str = GetVarNameWRTSetting(dataType);
            return str + " = " + "Me." + str; 
        }
        private string GetInitDefForVar(string colName, string dataType)
        {
            string str="";
            switch (dataType)
            {
                case "varchar":  str = "\"\""; break;
                case "nvarchar": str = "\"\""; break;
                case "numeric": str = "0"; break;
                case "bit": str = "0"; break;
                case "datetime": str = "ServerDate"; break;
            }
            return colName + " = " + str;
        }
        private string GetPropertyForVariable(string colName,string dataType)
        {
            StringBuilder L_strBuilder = new StringBuilder();
            L_strBuilder.AppendLine(tab2 + "Public Property " + colName + "() As " + GetDataType( dataType));
            L_strBuilder.AppendLine(tab3 + "Get");
            L_strBuilder.AppendLine(tab4 + "Return " + GetVarNameWRTSetting(colName ));
            L_strBuilder.AppendLine(tab3 + "End Get");
            string str = tab3 + "Set(ByVal Value As ";
            str += GetDataType(dataType); 
            L_strBuilder.AppendLine(str + ")");
            L_strBuilder.AppendLine(tab4 + GetVarNameWRTSetting(colName ) + " = Value");
            L_strBuilder.AppendLine(tab3 + "End Set");
            L_strBuilder.AppendLine(tab2 + "End Property");
            return L_strBuilder.ToString();  
        }
        private void WriteAddRecFunction()
        {
            WriteFunctionDefination("Public", "AddRec()", "string");
            strBuilder.AppendLine(tab3 + "Dim Para1 As System.Data.SqlClient.SqlParameter");
            strBuilder.AppendLine(tab3 + "Try");
            strBuilder.AppendLine(tab4 + "AddParameter(\"Add\")");
            strBuilder.AppendLine(tab4 + "cmd.CommandText = \"" +
                AppSetting.preInsProc + "Insert_" + dt.TableName +
                AppSetting.postInsProc + "\"");
            strBuilder.AppendLine(tab4 + "Para1 = GetParameter(\"RecId\", SqlDbType.Int, L_AddedBy, ParameterDirection.Output)");
            strBuilder.AppendLine(tab4 + "cmd.Parameters.Add(Para1)");
            strBuilder.AppendLine(tab4 + "myIPAL.ExecuteMyCommand(cmd)");
            strBuilder.AppendLine(tab4 + "AddRec = Para1.Value");

            strBuilder.AppendLine(tab3 + "Catch ex As Exception");
            strBuilder.AppendLine(tab4 + "ES.RenfroERP.Messages.StoreRunTimeErrors(Me.ClassName, ex.Message, \"AddRec()\")");
            strBuilder.AppendLine(tab4 + "Return \"\"");
            strBuilder.AppendLine(tab3 + "End Try");
            WriteEndFunction(); 
        }
        private void WriteUpdateRecFunction()
        {
            WriteSubDefination ("Public", "UpdateRec()");
            strBuilder.AppendLine(tab3 + "Try");
            strBuilder.AppendLine(tab4 + "AddParameter(\"Update\")");
            strBuilder.AppendLine(tab3 + "cmd.CommandText = \"" +
                AppSetting.preUpdProc + "Update_" + dt.TableName +
                AppSetting.postUpdProc  + "\"");
            strBuilder.AppendLine(tab4 + "myIPAL.ExecuteMyCommand(cmd)");
            WriteExceptionHandlingStatement("UpdateRec"); 
            WriteEndSub (); 
        }
        
        private void WriteAddParameterSub()
        {
            WriteSubDefination("Private", "AddParameter(ByVal Mode As String)");
            strBuilder.AppendLine(tab3 + "cmd = myIPAL.GetCommand");
            strBuilder.AppendLine(tab3 + "cmd.CommandType = CommandType.Text");
            strBuilder.AppendLine(tab3 + "cmd.CommandType = CommandType.StoredProcedure");
            for (int i = 1; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i]["Column_Name"].ToString() == "AddedBy" ||
                    dt.Rows[i]["Column_Name"].ToString() == "ModifiedBy" ||
                    dt.Rows[i]["Column_Name"].ToString() == "AddedDt" ||
                    dt.Rows[i]["Column_Name"].ToString() == "ModifiedDt")
                    continue;
                strBuilder.AppendLine(tab3 + GetStatementForAddingParameter(dt.Rows[i]["Column_Name"].ToString(),
                    dt.Rows[i]["Data_Type"].ToString()));
            }
            strBuilder.AppendLine(tab3 + "If Mode = \"Add\" Then");
            strBuilder.AppendLine(tab4 + "cmd.Parameters.Add(GetParameter(\"AddedBy\", DbType.String, L_AddedBy))");
            strBuilder.AppendLine(tab3 + "Else");
            strBuilder.AppendLine(tab4 + "cmd.Parameters.Add(GetParameter(\"" + 
                dt.Rows[0]["Column_Name"].ToString()+ 
                "\", DbType.String," +
                GetVarNameWRTSetting(dt.Rows[0]["Column_Name"].ToString()) + "))");
            strBuilder.AppendLine(tab4 + "cmd.Parameters.Add(GetParameter(\"ModifiedBy\", DbType.String, L_ModifiedBy))");
            strBuilder.AppendLine(tab3 + "End If");
            WriteEndSub(); 
        }
        private void WriteDeleteRecSub()
        {
            WriteSubDefination("Public", "DeleteRec(ByVal RecId As String, ByVal ModifiedBy As String)");
            strBuilder.AppendLine(tab3 + "Dim cmd As IDbCommand");
            strBuilder.AppendLine(tab3 + "cmd = myIPAL.GetCommand");
            strBuilder.AppendLine(tab3 + "cmd.CommandType = CommandType.Text");
            strBuilder.AppendLine(tab3 + "cmd.CommandText = \"UPDATE " + dt.TableName + 
                " SET \" & _");
            strBuilder.AppendLine(tab3 + "\"IsDeleted = 'Y', \" & _");
            strBuilder.AppendLine(tab3 + "\"ModifiedBy = '\" & ModifiedBy & \"', \" & _");
            strBuilder.AppendLine(tab3 + "\"ModifiedDt = GetDate() \" & _");
            strBuilder.AppendLine(tab3 + "\"WHERE " + dt.Rows[0]["Column_Name"].ToString() + " = '\" & RecId & \"'\"");
            strBuilder.AppendLine(tab3 + "myIPAL.ExecuteMyCommand(cmd)");
            WriteEndSub(); 
        }
        private void WriteSetValuesSub()
        {
            WriteSubDefination("Private", "SetValues(ByVal DR As DataRow)");
            strBuilder.AppendLine(tab3 + "Init()");
            strBuilder.AppendLine(tab3 + "Try");
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                strBuilder.AppendLine(tab4 + GetSetValueDefination(dt.Rows[i]["Column_Name"].ToString(),
                    dt.Rows[i]["Data_Type"].ToString()));
            }
            WriteExceptionHandlingStatement("SetValues"); 
            WriteEndSub(); 
        }
        private void WriteGetAllRecordsFunction()
        {
            WriteFunctionDefination("Public", "GetAllRecords(Optional ByVal strCondtion As String = \"\", Optional ByVal OrderByClause As String = \"\")", "DataTable");
            strBuilder.AppendLine(tab3 + "Dim str As String");
            strBuilder.AppendLine(tab3 + "Dim ds As New DataSet");
            strBuilder.AppendLine(tab3 + "If strCondtion = \"\" Then");
            strBuilder.AppendLine(tab4 + "str = \"SELECT * FROM " + dt.TableName + "\"");
            strBuilder.AppendLine(tab3 + "Else");
            strBuilder.AppendLine(tab4 + "str = \"SELECT * FROM " + dt.TableName + " WHERE \" & strCondtion");
            strBuilder.AppendLine(tab3 + "End If");
            strBuilder.AppendLine(tab3 + "If OrderByClause <> \"\" Then");
            strBuilder.AppendLine(tab4 + "str = str & \" order by \" & orderByClause");
            strBuilder.AppendLine(tab3 + "End If");
            strBuilder.AppendLine(tab3 + "Try");
            strBuilder.AppendLine(tab4 + "ds = ES.DAC.GetMyDataSet(str)");
            strBuilder.AppendLine(tab4 + "Return ds.Tables(0)");
            WriteExceptionHandlingStatement("GetAllRecords");
            WriteEndFunction(); 
        }
        private void WriteExceptionHandlingStatement(string functionName)
        {
            strBuilder.AppendLine(tab3 + "Catch ex As Exception");
            strBuilder.AppendLine(tab4 + "ES.RenfroERP.Messages.StoreRunTimeErrors(Me.ClassName, ex.Message, \"" + functionName + "()\")");
            strBuilder.AppendLine(tab3 + "End Try");
        }
        private void WriteGetRecordSub()
        {
            WriteSubDefination("Public", "GetRecord(ByVal RecordId As String)");
            strBuilder.AppendLine(tab3 + "Dim str As String");
            strBuilder.AppendLine(tab3 + "Dim dv As DataView");
            strBuilder.AppendLine(tab3 + "Try");
            strBuilder.AppendLine(tab4 + "str = \"SELECT * FROM " + dt.TableName + " WHERE " +
                dt.Rows[0]["Column_Name"] + " = '\" + RecordId + \"'");
            strBuilder.AppendLine(tab4 + "dv = ES.DAC.GetMyDataview(str)");
            strBuilder.AppendLine(tab3 + "If dv.Count > 0 Then");
            strBuilder.AppendLine(tab4 + "SetValues(dv.Item(0).Row)");
            strBuilder.AppendLine(tab3 + "End If");
            WriteExceptionHandlingStatement("GetRecord");
            WriteEndSub (); 
        }
        private string GetSetValueDefination(string colName, string dataType)
        {
            string str = GetVarNameWRTSetting(colName) + " = " + 
                "IIf(IsDBNull(DR(\"" + colName + "\")), ";
            switch (dataType)
            {
                case "varchar": str += "\"\""; break;
                case "nvarchar": str += "\"\""; break;
                case "numeric": str += "0"; break;
                case "bit": str += "0"; break;
                case "datetime": str += "ServerDate"; break;
            }
            str +=", DR(\"" + colName + "\"))";
            return str;
        }
        private string GetStatementForAddingParameter(string colName, string dataType)
        {
            string str = "cmd.Parameters.Add(GetParameter(\"" + colName + "\", DbType.";
            str += GetDataType(dataType); 
            str += ", " + GetVarNameWRTSetting(colName );  
            return str + "))";
        }
        private string GetStatementForAddingWSParameter(string colName, string dataType)
        {
            string str = "VDALAccessor.AddParameter(\"" + colName + "\", SqlDbType.";
            str += GetSqlDataType (dataType);
            str += ", " + GetVarNameWRTSetting(colName);
            return str + ")";
        }
        private void WriteEndSub()
        {
            strBuilder.AppendLine(tab2 + "End sub");
        }
        private void WriteEndFunction()
        {
            strBuilder.AppendLine(tab2 + "End Function");
        }
        private void WriteSubDefination(string accessModifier, string subName)
        {
            strBuilder.AppendLine(tab2 + accessModifier + " sub " + subName);
        }
        private void WriteFunctionDefination(string accessModifier,string funcName,string retType)
        {
            strBuilder.AppendLine(tab2 + accessModifier + " function " + funcName +
                " As " + retType);
        }
        private void WriteGetParameterFunction()
        {
            WriteFunctionDefination("Private", "GetParameter(ByVal paraName As string, ByVal dataType As DbType, ByVal value As Object, Optional ByVal paraDirection As System.Data.ParameterDirection = ParameterDirection.Input)",
                "IDataParameter");
            strBuilder.AppendLine(tab3 + "Dim para As IDataParameter");
            strBuilder.AppendLine(tab3 + "para = myIPAL.GetParameter");
            strBuilder.AppendLine(tab3 + "Para.ParameterName = " +
            "\"@\" & \"" + AppSetting.preParam + "\" & paraname & \"" + AppSetting.postParam + "\"");
            strBuilder.AppendLine(tab3 + "Para.Value = value");
            strBuilder.AppendLine(tab3 + "Para.DbType = dataType");
            strBuilder.AppendLine(tab3 + "para.Direction = paraDirection");
            strBuilder.AppendLine(tab3 + "Return Para");
            WriteEndFunction();
        }
    }
}
