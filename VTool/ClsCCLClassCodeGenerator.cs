using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.IO;

namespace VTool
{
    public class ClsCCLClassCodeGenerator: ClsCodeGenBase 
    {
        protected DataTable dt;
        protected StringBuilder strBuilder;
        protected string tab1 = "\t";
        protected string tab2 = "\t\t";
        protected string tab3 = "\t\t\t";
        protected string tab4 = "\t\t\t\t";

        public void GenerateClassCode(string tableName)
        {
            strBuilder = new StringBuilder();
            dt = DBHandler.GetTableWithSchema(tableName);
            PrepareClassCode();
            WriteClassCodeInFile();
        }
        private void PrepareClassCode()
        {
            WriteImportsStatement();
            strBuilder.AppendLine("namespace " + AppSetting.namespaceName + ".Controller");
            strBuilder.AppendLine("{");
            WriteClassCode();
            strBuilder.AppendLine("}");
        }
        protected void WriteClassCodeInFile()
        {
            string fileName = System.Configuration.ConfigurationSettings.AppSettings["OutPutFilePath"].ToString() +
                "\\ClassCode\\" + "CCL" + GetClassName() + ".cs";
            File.WriteAllText(fileName, strBuilder.ToString());
        }
        private void WriteImportsStatement()
        {
            strBuilder.AppendLine("//Code is auto generated by VTool");
            strBuilder.AppendLine("using Transporter.Model;");
            strBuilder.AppendLine("using System.Data;");
            strBuilder.AppendLine("using NV.DBManager;");
            strBuilder.AppendLine("using System;");
        }
        private void WriteClassCode()
        {
            strBuilder.AppendLine(tab1 + "public class " +
                AppSetting.preClass + "CCL" + dt.TableName + AppSetting.postClass);
            strBuilder.AppendLine(tab1 + "{");
            WriteVariableDeclaration();
            WritePropertiesOfVariable();
            WriteRegularFunctions();
            WriteSupportFunctions();
            WriteRegionSpeceficToThisClass();
            strBuilder.AppendLine(tab1 + "}");
        }
        private void WriteRegionSpeceficToThisClass()
        {
            WriteRegion(" Function: Specefic to this Class ");
            WriteEndRegion();
        }
        private void WriteRegularFunctions()
        {
            WriteRegion(" Data Access Function: Regular ");
            WriteGetRecordsFunc();
            //WriteGetRecordFunction ()
            WriteAddRecFunc();
            WriteUpdateRecFunc();
            WriteDeleteRecFunc();
            WriteAddParameterFunc();
            WriteGetRecordFunc();
            WriteEndRegion();
        }
        private void WriteSupportFunctions()
        {
            WriteRegion(" Data Access Function: Supporting ");
            WriteDRToObjectFunc();
            //WriteGetRecordsFunc();
            WriteEndRegion();
        }
        private void WriteVariableDeclaration()
        {
            WriteRegion("private Variables");
            strBuilder.AppendLine(tab3 + "private $$ _Entity;");
            strBuilder.AppendLine(tab3 + "private string _queryString;");
            WriteEndRegion();
        }
        private void WriteEndRegion()
        {
            strBuilder.AppendLine("#endregion");
        }
        private void WriteBlankLine()
        {
            strBuilder.AppendLine("");
        }
        private void WriteRegion(string regionDesc)
        {
            WriteBlankLine();
            strBuilder.AppendLine("#region " + regionDesc);
        }
        private string GetVariableDeclaration(string colName, string dataType)
        {
            string str = tab2 + "private " + GetDataType(dataType) + " " + GetVarNameWRTSetting(colName) + ";";
            return str;
        }
        private string GetDataType(string dataType)
        {

            string str = "";
            switch (dataType)
            {
                case "nvarchar": str = "string"; break;
                case "varchar": str = "string"; break;
                case "numeric": str = "decimal"; break;
                case "datetime": str = "System.DateTime"; break;
                case "bit": str = "decimal"; break;
                default: str = "decimal"; break;
            }
            return str;
        }
        private string GetParamDataType(string dataType)
        {

            string str = "";
            switch (dataType)
            {
                case "nvarchar": str = "String"; break;
                case "varchar": str = "String"; break;
                case "numeric": str = "Decimal"; break;
                case "datetime": str = "DateTime"; break;
                case "bit": str = "Decimal"; break;
                default : str = "Decimal"; break;
            }
            return str;
        }
        private string GetSqlDataType(string dataType)
        {
            string str = "";
            switch (dataType)
            {
                case "nvarchar": str = "nVarChar"; break;
                case "varchar": str = "VarChar"; break;
                case "numeric": str = "Decimal"; break;
                case "datetime": str = "DateTime"; break;
                case "bit": str = "Bit"; break;
                default: str = "Decimal"; break;
            }
            return str;
        }
        private string GetVarNameWRTSetting(string var)
        {
            return AppSetting.preVar + var + AppSetting.postVar;
        }
        private void WritePropertiesOfVariable()
        {
            WriteRegion("Properties (Class Attributes)");
            strBuilder.AppendLine(GetPropertyForVariable("Entity",""));
            WriteEndRegion();
        }
        //private string GetPropertyForVariable(string colName, string dataType)
        //{
        //    StringBuilder L_strBuilder = new StringBuilder();
        //    L_strBuilder.AppendLine(tab2 + "public " + GetDataType(dataType) + " " + colName );
        //    L_strBuilder.AppendLine(tab2 + "{");
        //    L_strBuilder.AppendLine(tab2 + "get{return " + GetVarNameWRTSetting(colName) + ";}");
        //    L_strBuilder.AppendLine(tab3 + "set{" + GetVarNameWRTSetting(colName) + " = value;}");
        //    L_strBuilder.AppendLine(tab2 + "}");
        //    return L_strBuilder.ToString();
        //}
        private string GetClassName()
        {
            return AppSetting.preClass + dt.TableName + AppSetting.postClass;
        }
        private string GetCopyDefination(string dataType)
        {
            string str = GetVarNameWRTSetting(dataType);
            return str + " = " + "this." + str;
        }
        private string GetInitDefForVar(string colName, string dataType)
        {
            string str = "";
            switch (dataType)
            {
                case "nvarchar": str = "\"\""; break;
                case "varchar": str = "\"\""; break;
                case "numeric": str = "0"; break;
                case "bit": str = "0"; break;
                case "datetime": str = "System.DateTime.Now"; break;
                default : str = "0"; break;
            }
            return colName + " = " + str + ";";
        }
        private string GetPropertyForVariable(string colName, string dataType)
        {
            StringBuilder L_strBuilder = new StringBuilder();
            L_strBuilder.AppendLine(tab2 + "public " + GetDataType(dataType) + " " + colName);
            L_strBuilder.AppendLine(tab2 + "{");
            L_strBuilder.AppendLine(tab2 + "get{return " + GetVarNameWRTSetting(colName) + ";}");
            L_strBuilder.AppendLine(tab3 + "set{" + GetVarNameWRTSetting(colName) + " = value;}");
            L_strBuilder.AppendLine(tab2 + "}");
            return L_strBuilder.ToString();
        }
        private void WriteAddRecFunc()
        {
            WriteFunctionDefination("public", "AddRec()", "bool");
            //strBuilder.AppendLine(tab3 + "System.Data.SqlClient.SqlParameter para1;");
            strBuilder.AppendLine(tab3 + "try");
            strBuilder.AppendLine(tab3 + "{");
            strBuilder.AppendLine(tab3 + "AddParameter(\"Add\");");

            strBuilder.AppendLine(tab4 + "DBManager.MyDBManager.CommandText = \"" +
                AppSetting.preInsProc + "Insert_" + dt.TableName +
                AppSetting.postInsProc + "\";");
            //strBuilder.AppendLine(tab4 + "para1 = DBManager.MyDBManager.GetParameter(\"RecId\", DbType.Decimal , 0, ParameterDirection.Output);");
            //strBuilder.AppendLine(tab4 + "DBManager.MyDBManager.AddParameter (para1);");
            strBuilder.AppendLine(tab4 + "DBManager.MyDBManager.ExecuteNonQuery();");
            //strBuilder.AppendLine(tab4 + "_" + dt.TableName + "." + dt.TableName + "Id = System .Convert .ToDecimal ( para1.Value);");
            //strBuilder.AppendLine(tab4 + "return System .Convert .ToDecimal ( para1.Value);");
            strBuilder.AppendLine(tab4 + "return true;");

            strBuilder.AppendLine(tab3 + "}");
            strBuilder.AppendLine(tab3 + "catch (Exception e)");
            strBuilder.AppendLine(tab3 + "{");
            strBuilder.AppendLine(tab3 + "ErrorHandler.MyERH.HandleError(e.Message, \"CCL" + dt.TableName + "\", \"AddRec\");");
            strBuilder.AppendLine(tab4 + "return false;");
            strBuilder.AppendLine(tab3 + "}");
            WriteEndFunction();
        }
        private void WriteUpdateRecFunc()
        {
            WriteFunctionDefination("public", "UpdateRec()", "bool");
            strBuilder.AppendLine(tab3 + "try");
            strBuilder.AppendLine(tab3 + "{");
            strBuilder.AppendLine(tab3 + "AddParameter(\"Update\");");
            strBuilder.AppendLine(tab4 + "DBManager.MyDBManager.CommandText = \"" +
                AppSetting.preInsProc + "Update_" + dt.TableName +
                AppSetting.postInsProc + "\";");
            strBuilder.AppendLine(tab4 + "DBManager.MyDBManager.ExecuteNonQuery();");
            strBuilder.AppendLine(tab4 + "return true;");
            strBuilder.AppendLine(tab3 + "}");
            strBuilder.AppendLine(tab3 + "catch (Exception e)");
            strBuilder.AppendLine(tab3 + "{");
            strBuilder.AppendLine(tab3 + "ErrorHandler.MyERH.HandleError(e.Message, \"CCL" + dt.TableName + "\", \"UpdateRec\");");
            strBuilder.AppendLine(tab4 + "return false;");
            strBuilder.AppendLine(tab3 + "}");
            WriteEndFunction();
        }
        private void WriteAddParameterFunc()
        {
            WriteFunctionDefination("private", "AddParameter(string mode)", "void");
            strBuilder.AppendLine(tab3 + "DBManager.MyDBManager.ClearParameter();");
            strBuilder.AppendLine(tab3 + "DBManager.MyDBManager.CommandType = CommandType.StoredProcedure;");
            for (int i = 1; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i]["Column_Name"].ToString() == "AddedBy" ||
                    dt.Rows[i]["Column_Name"].ToString() == "ModifiedBy" ||
                    dt.Rows[i]["Column_Name"].ToString() == "AddedDt" ||
                    dt.Rows[i]["Column_Name"].ToString() == "ModifiedDt")
                    continue;
                strBuilder.AppendLine(tab3 + GetStatementForAddingParameter(dt.Rows[i]["Column_Name"].ToString(),
                    dt.Rows[i]["Data_Type"].ToString()));
            }
            strBuilder.AppendLine(tab3 + "if (mode == \"Add\")");
            //strBuilder.AppendLine(tab4 + "DBManager.MyDBManager.AddParameter(\"AddedBy\", DbType.String, _Entity.AddedBy);");
            strBuilder.AppendLine(tab4 + ";");
            strBuilder.AppendLine(tab3 + "else");
            strBuilder.AppendLine(tab3 + "{");
            strBuilder.AppendLine(tab3 + GetStatementForAddingParameter(dt.Rows[0]["Column_Name"].ToString(),
                    dt.Rows[0]["Data_Type"].ToString()));
            //strBuilder.AppendLine(tab4 + "DBManager.MyDBManager.AddParameter(\"ModifiedBy\", DbType.String, _Entity.ModifiedBy);");
            strBuilder.AppendLine(tab4 + ";");
            strBuilder.AppendLine(tab3 + "}");
            WriteEndFunction();
        }
        private void WriteGetRecordsFunc()
        {
            WriteFunctionDefination("public", "GetRecords()", "DataView");
            strBuilder.AppendLine(tab3 + "_queryString = \"SELECT * FROM ____\";");
            strBuilder.AppendLine(tab3 + "return DBManager.MyDBManager.GetDataView(_queryString);");
            WriteEndFunction();
        }
        private void WriteGetRecordFunc()
        {
            WriteFunctionDefination("public", "GetRecord(object RecId)", dt.TableName);
            strBuilder.AppendLine(tab3 + "DataRow dr;");
            strBuilder.AppendLine(tab3 + "if (RecId == null) return null;");
            strBuilder.AppendLine(tab4 + "_queryString = \"SELECT * FROM " + dt.TableName + "\";");
            strBuilder.AppendLine(tab4 + "_queryString += \" WHERE " + dt.TableName + "Id = \" + RecId.ToString();");
            strBuilder.AppendLine(tab4 + "dr = DBManager.MyDBManager.GetDataRow(_queryString);");
            strBuilder.AppendLine(tab4 + "DRToObject(dr);");
            //strBuilder.AppendLine(tab4 + "return _" + dt.TableName + ";");
            strBuilder.AppendLine(tab4 + "return _Entity;");
            WriteEndFunction();
        }
        private void WriteDeleteRecFunc()
        {
            WriteFunctionDefination("public", "DeleteRec(object RecId)", "void");
            strBuilder.AppendLine(tab4 + "DBManager.MyDBManager.ExecuteNonQuery();");
            WriteEndFunction();
        }
        private void WriteDRToObjectFunc()
        {
            WriteFunctionDefination("public", "DRToObject(DataRow dr)", "void");
            //strBuilder.AppendLine(tab4 + "_" + dt.TableName + " = new " + dt.TableName + "();");
            strBuilder.AppendLine(tab4 + "_Entity = new " + dt.TableName + "();");
            strBuilder.AppendLine(tab4 + "if(dr == null) return;");
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                strBuilder.AppendLine(tab4 + GetSetValueDefination(dt.Rows[i]["Column_Name"].ToString(),
                    dt.Rows[i]["Data_Type"].ToString()));
            }
            WriteEndFunction();
        }
        private string GetSetValueDefination(string colName, string dataType)
        {
            //string str = "_" + dt.TableName + "." + GetVarNameWRTSetting(colName) + " = " +
            string str = "_Entity." + colName + " = " +
                "NV.ComnFun.BSE0031GenFun.";
            switch (dataType)
            {
                case "nvarchar": str += "GetStringValue"; break;
                case "varchar": str += "GetStringValue"; break;
                case "numeric": str += "GetDecimalValue"; break;
                case "bit": str += "GetDecimalValue"; break;
                case "datetime": str += "GetDateTimeValue"; break;
                default: str += "GetDecimalValue"; break;
            }
            str += "(dr[\"" + colName + "\"]);";
            return str;
        }
        private string GetStatementForAddingParameter(string colName, string dataType)
        {
            string str = "DBManager.MyDBManager.AddParameter(\"" + colName + "\", DbType.";
            str += GetParamDataType(dataType);
            //str += ", " + GetVarNameWRTSetting(dt.TableName) + "." + colName;
            str += ", " + "_Entity." + colName;
            return str + ");";
        }
        private void WriteEndFunction()
        {
            strBuilder.AppendLine("}");
        }
        private void WriteFunctionDefination(string accessModifier, string funcName, string retType)
        {
            strBuilder.AppendLine(tab2 + accessModifier + " " + retType + " " + funcName);
            strBuilder.AppendLine(tab2 + "{");
        }
    }
}
